// Generated by gencpp from file util_msgs/trajectory.msg
// DO NOT EDIT!


#ifndef UTIL_MSGS_MESSAGE_TRAJECTORY_H
#define UTIL_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace util_msgs
{
template <class ContainerAllocator>
struct trajectory_
{
  typedef trajectory_<ContainerAllocator> Type;

  trajectory_()
    : force_left()
    , force_right()
    , dp_left()
    , dp_right()  {
    }
  trajectory_(const ContainerAllocator& _alloc)
    : force_left(_alloc)
    , force_right(_alloc)
    , dp_left(_alloc)
    , dp_right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_left_type;
  _force_left_type force_left;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_right_type;
  _force_right_type force_right;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dp_left_type;
  _dp_left_type dp_left;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dp_right_type;
  _dp_right_type dp_right;





  typedef boost::shared_ptr< ::util_msgs::trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::util_msgs::trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_

typedef ::util_msgs::trajectory_<std::allocator<void> > trajectory;

typedef boost::shared_ptr< ::util_msgs::trajectory > trajectoryPtr;
typedef boost::shared_ptr< ::util_msgs::trajectory const> trajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::util_msgs::trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::util_msgs::trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::util_msgs::trajectory_<ContainerAllocator1> & lhs, const ::util_msgs::trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.force_left == rhs.force_left &&
    lhs.force_right == rhs.force_right &&
    lhs.dp_left == rhs.dp_left &&
    lhs.dp_right == rhs.dp_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::util_msgs::trajectory_<ContainerAllocator1> & lhs, const ::util_msgs::trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace util_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::util_msgs::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::util_msgs::trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::util_msgs::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::util_msgs::trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::util_msgs::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::util_msgs::trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::util_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b6b28c558698fc8c155dd7d02d7a674";
  }

  static const char* value(const ::util_msgs::trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b6b28c558698fc8ULL;
  static const uint64_t static_value2 = 0xc155dd7d02d7a674ULL;
};

template<class ContainerAllocator>
struct DataType< ::util_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "util_msgs/trajectory";
  }

  static const char* value(const ::util_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::util_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 force_left\n"
"geometry_msgs/Vector3 force_right\n"
"geometry_msgs/Vector3 dp_left\n"
"geometry_msgs/Vector3 dp_right\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::util_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::util_msgs::trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_left);
      stream.next(m.force_right);
      stream.next(m.dp_left);
      stream.next(m.dp_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::util_msgs::trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::util_msgs::trajectory_<ContainerAllocator>& v)
  {
    s << indent << "force_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force_left);
    s << indent << "force_right: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force_right);
    s << indent << "dp_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dp_left);
    s << indent << "dp_right: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dp_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTIL_MSGS_MESSAGE_TRAJECTORY_H
